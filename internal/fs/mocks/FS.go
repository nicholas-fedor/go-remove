// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	logger "github.com/nicholas-fedor/go-remove/internal/logger"
	mock "github.com/stretchr/testify/mock"
)

// MockFS is an autogenerated mock type for the FS type
type MockFS struct {
	mock.Mock
}

type MockFS_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFS) EXPECT() *MockFS_Expecter {
	return &MockFS_Expecter{mock: &_m.Mock}
}

// AdjustBinaryPath provides a mock function with given fields: dir, binary
func (_m *MockFS) AdjustBinaryPath(dir string, binary string) string {
	ret := _m.Called(dir, binary)

	if len(ret) == 0 {
		panic("no return value specified for AdjustBinaryPath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(dir, binary)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockFS_AdjustBinaryPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdjustBinaryPath'
type MockFS_AdjustBinaryPath_Call struct {
	*mock.Call
}

// AdjustBinaryPath is a helper method to define mock.On call
//   - dir string
//   - binary string
func (_e *MockFS_Expecter) AdjustBinaryPath(dir interface{}, binary interface{}) *MockFS_AdjustBinaryPath_Call {
	return &MockFS_AdjustBinaryPath_Call{Call: _e.mock.On("AdjustBinaryPath", dir, binary)}
}

func (_c *MockFS_AdjustBinaryPath_Call) Run(run func(dir string, binary string)) *MockFS_AdjustBinaryPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockFS_AdjustBinaryPath_Call) Return(_a0 string) *MockFS_AdjustBinaryPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFS_AdjustBinaryPath_Call) RunAndReturn(run func(string, string) string) *MockFS_AdjustBinaryPath_Call {
	_c.Call.Return(run)
	return _c
}

// DetermineBinDir provides a mock function with given fields: useGoroot
func (_m *MockFS) DetermineBinDir(useGoroot bool) (string, error) {
	ret := _m.Called(useGoroot)

	if len(ret) == 0 {
		panic("no return value specified for DetermineBinDir")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(bool) (string, error)); ok {
		return rf(useGoroot)
	}
	if rf, ok := ret.Get(0).(func(bool) string); ok {
		r0 = rf(useGoroot)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(useGoroot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFS_DetermineBinDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetermineBinDir'
type MockFS_DetermineBinDir_Call struct {
	*mock.Call
}

// DetermineBinDir is a helper method to define mock.On call
//   - useGoroot bool
func (_e *MockFS_Expecter) DetermineBinDir(useGoroot interface{}) *MockFS_DetermineBinDir_Call {
	return &MockFS_DetermineBinDir_Call{Call: _e.mock.On("DetermineBinDir", useGoroot)}
}

func (_c *MockFS_DetermineBinDir_Call) Run(run func(useGoroot bool)) *MockFS_DetermineBinDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MockFS_DetermineBinDir_Call) Return(_a0 string, _a1 error) *MockFS_DetermineBinDir_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFS_DetermineBinDir_Call) RunAndReturn(run func(bool) (string, error)) *MockFS_DetermineBinDir_Call {
	_c.Call.Return(run)
	return _c
}

// ListBinaries provides a mock function with given fields: dir
func (_m *MockFS) ListBinaries(dir string) []string {
	ret := _m.Called(dir)

	if len(ret) == 0 {
		panic("no return value specified for ListBinaries")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(dir)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockFS_ListBinaries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBinaries'
type MockFS_ListBinaries_Call struct {
	*mock.Call
}

// ListBinaries is a helper method to define mock.On call
//   - dir string
func (_e *MockFS_Expecter) ListBinaries(dir interface{}) *MockFS_ListBinaries_Call {
	return &MockFS_ListBinaries_Call{Call: _e.mock.On("ListBinaries", dir)}
}

func (_c *MockFS_ListBinaries_Call) Run(run func(dir string)) *MockFS_ListBinaries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFS_ListBinaries_Call) Return(_a0 []string) *MockFS_ListBinaries_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFS_ListBinaries_Call) RunAndReturn(run func(string) []string) *MockFS_ListBinaries_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveBinary provides a mock function with given fields: binaryPath, name, verbose, _a3
func (_m *MockFS) RemoveBinary(binaryPath string, name string, verbose bool, _a3 logger.Logger) error {
	ret := _m.Called(binaryPath, name, verbose, _a3)

	if len(ret) == 0 {
		panic("no return value specified for RemoveBinary")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool, logger.Logger) error); ok {
		r0 = rf(binaryPath, name, verbose, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFS_RemoveBinary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveBinary'
type MockFS_RemoveBinary_Call struct {
	*mock.Call
}

// RemoveBinary is a helper method to define mock.On call
//   - binaryPath string
//   - name string
//   - verbose bool
//   - _a3 logger.Logger
func (_e *MockFS_Expecter) RemoveBinary(binaryPath interface{}, name interface{}, verbose interface{}, _a3 interface{}) *MockFS_RemoveBinary_Call {
	return &MockFS_RemoveBinary_Call{Call: _e.mock.On("RemoveBinary", binaryPath, name, verbose, _a3)}
}

func (_c *MockFS_RemoveBinary_Call) Run(run func(binaryPath string, name string, verbose bool, _a3 logger.Logger)) *MockFS_RemoveBinary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(bool), args[3].(logger.Logger))
	})
	return _c
}

func (_c *MockFS_RemoveBinary_Call) Return(_a0 error) *MockFS_RemoveBinary_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFS_RemoveBinary_Call) RunAndReturn(run func(string, string, bool, logger.Logger) error) *MockFS_RemoveBinary_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFS creates a new instance of MockFS. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFS(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFS {
	mock := &MockFS{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
