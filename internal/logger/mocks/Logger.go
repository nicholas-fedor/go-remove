// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	"go.uber.org/zap"
)

// NewMockLogger creates a new instance of MockLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogger {
	mock := &MockLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLogger is an autogenerated mock type for the Logger type
type MockLogger struct {
	mock.Mock
}

type MockLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogger) EXPECT() *MockLogger_Expecter {
	return &MockLogger_Expecter{mock: &_m.Mock}
}

// Sugar provides a mock function for the type MockLogger
func (_mock *MockLogger) Sugar() *zap.SugaredLogger {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Sugar")
	}

	var r0 *zap.SugaredLogger
	if returnFunc, ok := ret.Get(0).(func() *zap.SugaredLogger); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zap.SugaredLogger)
		}
	}
	return r0
}

// MockLogger_Sugar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sugar'
type MockLogger_Sugar_Call struct {
	*mock.Call
}

// Sugar is a helper method to define mock.On call
func (_e *MockLogger_Expecter) Sugar() *MockLogger_Sugar_Call {
	return &MockLogger_Sugar_Call{Call: _e.mock.On("Sugar")}
}

func (_c *MockLogger_Sugar_Call) Run(run func()) *MockLogger_Sugar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogger_Sugar_Call) Return(sugaredLogger *zap.SugaredLogger) *MockLogger_Sugar_Call {
	_c.Call.Return(sugaredLogger)
	return _c
}

func (_c *MockLogger_Sugar_Call) RunAndReturn(run func() *zap.SugaredLogger) *MockLogger_Sugar_Call {
	_c.Call.Return(run)
	return _c
}

// Sync provides a mock function for the type MockLogger
func (_mock *MockLogger) Sync() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Sync")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLogger_Sync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sync'
type MockLogger_Sync_Call struct {
	*mock.Call
}

// Sync is a helper method to define mock.On call
func (_e *MockLogger_Expecter) Sync() *MockLogger_Sync_Call {
	return &MockLogger_Sync_Call{Call: _e.mock.On("Sync")}
}

func (_c *MockLogger_Sync_Call) Run(run func()) *MockLogger_Sync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogger_Sync_Call) Return(err error) *MockLogger_Sync_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLogger_Sync_Call) RunAndReturn(run func() error) *MockLogger_Sync_Call {
	_c.Call.Return(run)
	return _c
}
