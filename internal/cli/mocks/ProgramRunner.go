// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/charmbracelet/bubbletea"
	mock "github.com/stretchr/testify/mock"
)

// NewMockProgramRunner creates a new instance of MockProgramRunner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProgramRunner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProgramRunner {
	mock := &MockProgramRunner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProgramRunner is an autogenerated mock type for the ProgramRunner type
type MockProgramRunner struct {
	mock.Mock
}

type MockProgramRunner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProgramRunner) EXPECT() *MockProgramRunner_Expecter {
	return &MockProgramRunner_Expecter{mock: &_m.Mock}
}

// RunProgram provides a mock function for the type MockProgramRunner
func (_mock *MockProgramRunner) RunProgram(m tea.Model, opts ...tea.ProgramOption) (*tea.Program, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(m, opts)
	} else {
		tmpRet = _mock.Called(m)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RunProgram")
	}

	var r0 *tea.Program
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(tea.Model, ...tea.ProgramOption) (*tea.Program, error)); ok {
		return returnFunc(m, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(tea.Model, ...tea.ProgramOption) *tea.Program); ok {
		r0 = returnFunc(m, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tea.Program)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(tea.Model, ...tea.ProgramOption) error); ok {
		r1 = returnFunc(m, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProgramRunner_RunProgram_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunProgram'
type MockProgramRunner_RunProgram_Call struct {
	*mock.Call
}

// RunProgram is a helper method to define mock.On call
//   - m tea.Model
//   - opts ...tea.ProgramOption
func (_e *MockProgramRunner_Expecter) RunProgram(m interface{}, opts ...interface{}) *MockProgramRunner_RunProgram_Call {
	return &MockProgramRunner_RunProgram_Call{Call: _e.mock.On("RunProgram",
		append([]interface{}{m}, opts...)...)}
}

func (_c *MockProgramRunner_RunProgram_Call) Run(run func(m tea.Model, opts ...tea.ProgramOption)) *MockProgramRunner_RunProgram_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 tea.Model
		if args[0] != nil {
			arg0 = args[0].(tea.Model)
		}
		var arg1 []tea.ProgramOption
		var variadicArgs []tea.ProgramOption
		if len(args) > 1 {
			variadicArgs = args[1].([]tea.ProgramOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockProgramRunner_RunProgram_Call) Return(program *tea.Program, err error) *MockProgramRunner_RunProgram_Call {
	_c.Call.Return(program, err)
	return _c
}

func (_c *MockProgramRunner_RunProgram_Call) RunAndReturn(run func(m tea.Model, opts ...tea.ProgramOption) (*tea.Program, error)) *MockProgramRunner_RunProgram_Call {
	_c.Call.Return(run)
	return _c
}
